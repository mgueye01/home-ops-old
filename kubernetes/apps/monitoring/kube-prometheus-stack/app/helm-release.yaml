---
# yaml-language-server: $schema=https://kubernetes-schemas.g-eye.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 45.25.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 15m
  maxHistory: 3
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    fullnameOverride: prometheus
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverSlos: true
        kubelet: true
        kubeProxy: false
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: false
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true
    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 192.168.10.11
        - 192.168.10.12
        - 192.168.10.13
    kubeEtcd:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
      endpoints: *cp
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: true
      endpoints: *cp
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    alertmanager:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          ingress.home.arpa/type: "internal"
        hosts:
          - "alerts.${SECRET_DOMAIN}"
        path: /
        pathType: Prefix
      config:
        global:
          resolve_timeout: 5m
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog|CPUThrottlingHigh"
              continue: false
            - receiver: "discord"
        receivers:
          - name: "null"
          - name: "discord"
            webhook_configs:
              - url: "http://alertmanager-discord:9094"
        inhibit_rules:
          - source_matchers: ["severity = 'critical'"]
            target_matchers: ["severity = 'warning'"]
            equal: ["alertname", "namespace"]
        templates:
          - /etc/alertmanager/config/*.tmpl
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        limits:
          memory: 326M
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 11m
            memory: 32M
          limits:
            memory: 32M
      serviceMonitor:
        sampleLimit: 0
    prometheus:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          auth.home.arpa/enabled: "true"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "false"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        path: /
        pathType: Prefix
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "__replica__"
        scrapeInterval: 1m
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        retention: 2d
        retentionSize: "6GB"
        ruleSelector: {}
        ruleNamespaceSelector: {}
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.31.0
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
        additionalScrapeConfigs:
          - honor_timestamps: true
            job_name: minio-nas
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            bearer_token: ${SECRET_MINIO_TOKEN}
            static_configs:
              - targets:
                  - "192.168.0.18:9000"
          - job_name: "snmp-exporter"
            static_configs:
              - targets: ["192.168.0.18"]
            metrics_path: /snmp
            params:
              module: [synology]
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: 192.168.0.18:9116 # The SNMP exporter's real hostname:port.

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Prometheus
    nodeExporter:
      enabled: true
    serviceMonitor:
      scrapeTimeout: 60s
