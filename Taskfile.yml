---
version: "3"
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  myjob
  namespace: default
  labels:
    app:  myjob
spec:
  selector:
    matchLabels:
      app: myjob
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  myjob
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  myjob
        image:  myjob:latest
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_status/healthz
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: myjob
              key: DB_HOST
        ports:
        - containerPort:  80
          name:  myjob
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /usr/share/zoneinfo/Asia/Taipei
      restartPolicy: Always
---

vars:
  PROJECT_DIR:
    sh: "git rev-parse --show-toplevel"
  CLUSTER_DIR: "{{.PROJECT_DIR}}/cluster"
  ANSIBLE_DIR: "{{.PROJECT_DIR}}/ansible"
  TERRAFORM_DIR: "{{.PROJECT_DIR}}/provision/terraform"

env:
  KUBECONFIG: "{{.PROJECT_DIR}}/provision/kubeconfig"

includes:
  ansible: .taskfiles/ansible.yml
  cluster: .taskfiles/ClusterTasks.yml
  flux: .taskfiles/flux.yml
  format: .taskfiles/format.yml
  lint: .taskfiles/lint.yml
  pre-commit: .taskfiles/pre-commit.yml
  terraform: .taskfiles/terraform.yml
  snapshot: .taskfiles/SnapshotTasks.yml
  toolbox: .taskfiles/RookTasks.yml

tasks:
  kubeconfig:
    desc: Remotely fetch kubeconfig from Kubernetes
    cmds:
      - rsync --verbose --progress --partial --rsync-path="sudo rsync" {{.K3S_PRIMARY_MASTER_NODE_USERNAME}}@{{.K3S_PRIMARY_MASTER_NODE_ADDR}}:/etc/rancher/k3s/k3s.yaml "{{.CLUSTER_DIR}}/kubeconfig"
      - sed -i '' 's/127.0.0.1/{{.K3S_LB_ADDR}}/g' "{{.CLUSTER_DIR}}/kubeconfig"
      - chmod go-r "{{.CLUSTER_DIR}}/kubeconfig"
    vars:
      K3S_PRIMARY_MASTER_NODE_USERNAME: "root"
      K3S_PRIMARY_MASTER_NODE_ADDR: "192.168.10.11"
      K3S_LB_ADDR: "192.168.10.250"
