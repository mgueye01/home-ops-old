---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      interval: 5m
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      version: 35.0.3
  interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 5
  values:
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "pushover"
            pushover_configs:
              - token: "${SECRET_PUSHOVER_ALERT_MANAGER_APIKEY}"
                user_key: "${SECRET_PUSHOVER_USERKEY}"
                send_resolved: true
                html: true
                priority: |-
                  {{ if eq .Status "firing" }}1{{ else }}0{{ end }}
                url_title: View in Alert Manager
                title: |-
                  [{{ .Status | toUpper -}}
                  {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
                  ] {{ .CommonLabels.alertname }}
                message: |-
                  {{- range .Alerts }}
                    {{- if ne .Labels.severity "" }}
                      <b>Severity:</b> <i>{{ .Labels.severity }}</i>
                    {{- else }}
                      <b>Severity:</b> <i>N/A</i>
                    {{- end }}
                    {{- if ne .Annotations.description "" }}
                      <b>Description:</b> <i>{{ .Annotations.description }}</i>
                    {{- else if ne .Annotations.summary "" }}
                      <b>Summary:</b> <i>{{ .Annotations.summary }}</i>
                    {{- else if ne .Annotations.message "" }}
                      <b>Message:</b> <i>{{ .Annotations.message }}</i>
                    {{- else }}
                      <b>Description:</b> <i>N/A</i>
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      <b>Details:</b>
                      {{- range .Labels.SortedPairs }}
                        â€¢ <b>{{ .Name }}:</b> <i>{{ .Value }}</i>
                      {{- end }}
                    {{- end }}
                  {{- end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "pushover"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "pushover"
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://authelia.networking.svc.cluster.local/api/verify"
          nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "true"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"
    fullnameOverride: prometheus
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    # kubeApiServer:
    #   enabled: true
    # kubeControllerManager:
    #   enabled: true
    #   endpoints:
    #     - "192.168.10.11"
    #     - "192.168.10.12"
    #     - "192.168.10.13"
    # kubeEtcd:
    #   enabled: true
    #   endpoints:
    #     - "192.168.10.11"
    #     - "192.168.10.12"
    #     - "192.168.10.13"
    #   service:
    #     enabled: true
    #     port: 2381
    #     targetPort: 2381
    # kubeProxy:
    #   enabled: true
    #   endpoints:
    #     - "192.168.10.11"
    #     - "192.168.10.12"
    #     - "192.168.10.13"
    # kubeScheduler:
    #   enabled: true
    #   endpoints:
    #     - "192.168.10.11"
    #     - "192.168.10.12"
    #     - "192.168.10.13"
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://authelia.networking.svc.cluster.local/api/verify"
          nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "true"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
      prometheusSpec:
        additionalScrapeConfigs:
          - honor_timestamps: true
            job_name: minio-job
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            bearer_token: ${SECRET_MINIO_TOKEN}
            static_configs:
              - targets:
                  - "192.168.0.18:9000"
          - job_name: node
            static_configs:
              - targets: ['192.168.0.18:9100']
          - job_name: "snmp-exporter"
            static_configs:
              - targets: ["192.168.0.18"]
            metrics_path: /snmp
            params:
              module: [synology]
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: 192.168.0.18:9116 # The SNMP exporter's real hostname:port.
          - job_name: blackbox
            metrics_path: /probe
            params:
              module: [http_2xx]
            static_configs:
              # Add URLs as target parameter
              - targets:
                  - https://blog.g-eye.io
                  - https://me.${SECRET_DOMAIN}
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                # Important!
                target_label: target
                # Ensure blackbox-exporter is reachable from Prometheus
              - target_label: __address__
                replacement: blackbox-exporter.monitoring:9115
        enableAdminAPI: true
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        replicaExternalLabelName: replica
        replicas: 1
        retention: 6h
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 12Gi
              storageClassName: ceph-block
        thanos:
          image: "quay.io/thanos/thanos:v0.26.0"
          objectStorageConfig:
            key: objstore.yml
            name: thanos-objstore
          version: v0.23.1
        walCompression: true
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      extraArgs:
        - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'
        - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)'
        - '--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$'
      extraHostVolumeMounts:
        - name: textfiles
          hostPath: /var/lib/node_exporter/textfile_collector
          mountPath: /var/lib/node_exporter/textfile_collector
          readOnly: false
          mountPropagation: HostToContainer
    prometheusOperator:
      configReloaderCpu: 0
