---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      interval: 5m
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      version: "20.0.1"
  interval: 5m
  values:
    alertmanager:
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 1Gi
              storageClassName: ceph-block
      config:
        global:
          resolve_timeout: 5m
          slack_api_url: "${SECRET_ALERT_MANAGER_SLACK_WEBHOOK}"
        inhibit_rules:
          - equal:
              - alertname
              - namespace
            source_match:
              severity: critical
            target_match:
              severity: warning
        receivers:
          - name: "null"
          - name: "slack"
            slack_configs:
              - channel: "#k8s-events"
                icon_url: "https://avatars3.githubusercontent.com/u/3380462"
                send_resolved: true
                text: |-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
                title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}'
                username: Prometheus
        route:
          group_by:
            - alertname
            - job
          group_interval: 5m
          group_wait: 30s
          receiver: slack
          repeat_interval: 6h
          routes:
            - match:
                alertname: Watchdog
              receiver: "null"
            - continue: true
              match_re:
                severity: critical
              receiver: slack
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://authelia.networking.svc.cluster.local/api/verify"
          nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "true"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"
    fullnameOverride: prometheus
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - "192.168.10.250"
        # - "192.168.10.11"
        # - "192.168.10.12"
        # - "192.168.10.13"
    kubeEtcd:
      enabled: true
      endpoints:
        - "192.168.10.250"
        # - "192.168.10.11"
        # - "192.168.10.12"
        # - "192.168.10.13"
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    kubeProxy:
      enabled: true
      endpoints:
        - "192.168.10.250"
        # - "192.168.10.11"
        # - "192.168.10.12"
        # - "192.168.10.13"
    kubeScheduler:
      enabled: true
      endpoints:
        - "192.168.10.250"
        # - "192.168.10.11"
        # - "192.168.10.12"
        # - "192.168.10.13"
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://authelia.networking.svc.cluster.local/api/verify"
          nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "true"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
      prometheusSpec:
        additionalScrapeConfigs:
          - honor_timestamps: true
            job_name: minio-job
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            bearer_token: ${SECRET_MINIO_TOKEN}
            static_configs:
              - targets:
                  - "192.168.0.18:9000"
          - job_name: node
            static_configs:
              - targets: ['192.168.0.18:9100']
          - job_name: "snmp-exporter"
            static_configs:
              - targets: ["192.168.0.18"]
            metrics_path: /snmp
            params:
              module: [synology]
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: 192.168.0.18:9116 # The SNMP exporter's real hostname:port.
          - job_name: blackbox
            metrics_path: /probe
            params:
              module: [http_2xx]
            static_configs:
              # Add URLs as target parameter
              - targets:
                  - https://blog.g-eye.io
                  - https://me.${SECRET_DOMAIN}
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                # Important!
                target_label: target
                # Ensure blackbox-exporter is reachable from Prometheus
              - target_label: __address__
                replacement: blackbox-exporter.monitoring:9115
        enableAdminAPI: true
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        replicaExternalLabelName: replica
        replicas: 1
        retention: 6h
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 12Gi
              storageClassName: ceph-block
        thanos:
          image: "quay.io/thanos/thanos:v0.25.2"
          objectStorageConfig:
            key: objstore.yml
            name: thanos-objstore
          version: v0.23.1
        walCompression: true
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    prometheusOperator:
      configReloaderCpu: 0
